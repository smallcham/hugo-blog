<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>smallcham</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on smallcham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 Apr 2024 11:03:49 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于CentOS73.10内核版本编译安装6.5内核并开启vmlinux</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Ecentos73.10%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%856.5%E5%86%85%E6%A0%B8%E5%B9%B6%E5%BC%80%E5%90%AFvmlinux/</link>
      <pubDate>Fri, 05 Apr 2024 11:03:49 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Ecentos73.10%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%856.5%E5%86%85%E6%A0%B8%E5%B9%B6%E5%BC%80%E5%90%AFvmlinux/</guid>
      <description>目的 编译安装6.x版本的内核，用于支持ebpf程序，开启/sys/kernel/btf/vmlinux
编译环境 CentOS Linux release 7.9.2009 (Core) 3.10.0-1160.el7.x86_64 编译环境准备 yum groupinstall &amp;#34;Development Tools&amp;#34; -y &amp;amp;&amp;amp; \ yum install -y \ openssl-devel \ rpm-build \ redhat-rpm-config \ asciidoc \ hmaccalc \ perl-ExtUtils-Embed \ pesign \ xmlto \ audit-libs-devel \ binutils-devel \ elfutils-devel \ elfutils-libelf-devel \ ncurses-devel \ newt-devel \ numactl-devel \ pciutils-devel \ python-devel \ zlib-devel \ cmake \ centos-release-scl devtoolset-8-gcc* \ rpm-build yum -y install python3	# 没有python3的需要安装一下,有的话忽略 仅在当前终端启用新版本GCC用于编译，不影响系统默认GCC版本 scl enable devtoolset-8 bash 编译安装新版本 pahole，用于支持btf编译 git clone https://github.</description>
    </item>
    <item>
      <title>基于Linux3.10内核实现的写入保护和网络出口保护</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Elinux3.10%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%99%E5%85%A5%E4%BF%9D%E6%8A%A4%E5%92%8C%E7%BD%91%E7%BB%9C%E5%87%BA%E5%8F%A3%E4%BF%9D%E6%8A%A4/</link>
      <pubDate>Sat, 10 Jun 2023 22:52:12 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E4%BA%8Elinux3.10%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%99%E5%85%A5%E4%BF%9D%E6%8A%A4%E5%92%8C%E7%BD%91%E7%BB%9C%E5%87%BA%E5%8F%A3%E4%BF%9D%E6%8A%A4/</guid>
      <description>概述 针对于Linux系统中用户权限分配混乱,以及不明原因的黑客提取root权限,危害到部分重要用户的数据, 实现了几种功能:
用户绑定写入目录 进程绑定写入目录 写入目录白名单 进程网络出口IP和端口控制 此文档仅作为备注,记录一下实现过程及部分细节和问题.
写入拦截的实现的两种方式 一：通过内核kprobe探测技术对 sys_write 函数插入探针拦截所有写入调用 static struct kprobe write_kprobe = { .symbol_name = &amp;#34;sys_write&amp;#34;, }; 在探针函数内部实现以下流程:
获取 pt_regs *regs 寄存器的 di 也就是 sys_write 函数的第一个参数 fd 文件描述符, 通过文件描述符读取要写入的路径 通过 get_task_comm 函数从 current 中获取当前进程名进行规则比对. 仅允许 ** 绑定好关系的用户 / 白名单内的目录 / 进程绑定的目录 ** 执行写入操作, 其它操作全部拒绝 需要注意的是, 写入操作的拒绝不要通过在探针函数内 return 错误码来实现, 基本上内核是会炸的. 替代实现的方式可以将 sys_write 函数的 buffer 和 size 重置, 这样可以做到拒绝写入操作, 同时兼顾了内核的稳定性. void reset_buf_to_empty(struct pt_regs *regs) { regs-&amp;gt;si = EMPTY_BUFF_PTR; regs-&amp;gt;dx = 0; } 二：通过替换系统调用表，替换sys_write的函数指针指向自定的sys_write函数 asmlinkage long (*original_write)(unsigned int, const char __user *, size_t); // 存储原始的 sys_write 地址 asmlinkage long handler_sys_write(unsigned int fd, const char __user *buf, size_t count) { char path[MAX_PATH_LEN]; char* filepath = get_file_path(fd, path, MAX_PATH_LEN); int action = 0; // 文件路径获取失败则不处理 if (NULL == filepath) return original_write(fd, buf, count); // 排除一些系统本身需要使用的路径，加快处理速度减少竞争增加稳定性 if (1 == is_start_with(filepath, &amp;#34;/var/log/&amp;#34;) || 1 == is_start_with(filepath, &amp;#34;/tmp/&amp;#34;) ) return original_write(fd, buf, count); // 执行规则拦截逻辑 spin_lock(&amp;amp;config_lock); action = protect_rules_filter(filepath, current-&amp;gt;comm); spin_unlock(&amp;amp;config_lock); if (PROCESS_ACTION_DENY == action) return -EPERM; return original_write(fd, buf, count); } 网络拦截的实现的几种方式 关于网络拦截部分一开始是想通过 netfilter， hook 到 NF_INET_POST_ROUTING 来实现.</description>
    </item>
  </channel>
</rss>
